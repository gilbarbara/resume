@mixin background-image-retina($file, $type, $width, $height) {
  background-image: url($file + '.' + $type);
  background-size: $width $height;

  @media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 144dpi) {
    background-image: url($file + '@2x.' + $type);
  }
}

@mixin background-image-svg($name, $width, $height) {
  background-image: url('#{$name}.png'); // IE8 & below
  background-image: none, url('#{$name}.svg');
  background-size: $width $height;
}

@mixin truncate($width: 100%) {
  text-overflow: ellipsis;
  overflow: hidden;
  width: $width;
  white-space: nowrap;
}

@mixin vertical-align {
  position: relative;
  top: 50%;
  transform: translateY(-50%);
}

// always use even numbers for width (or else you will get half pixel for height) without 'px'. Only works with pixels
// don't add hash # for color

@mixin jagged-border($color: 000, $width: 16, $location: before, $type: fill, $side: outside) {
  $height: $width / 2;
  $scale: $width / 16;
  $rotate: '0';

  @if $side == inside {
    @if $location == after {
      $rotate: '180 8 4';
    }
  }
  @else if $location == before {
    $rotate: '180 8 4';
  }

  $arrow: "data:image/svg+xml,%3Csvg%20width%3D%22#{$width}px%22%20height%3D%22#{$height}px%22%20version%3D%221.1%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%3E%3Cpolygon%20points%3D%220%2C%200%208%2C%208%2016%2C0%22%20fill%3D%22%23#{$color}%22%20transform%3D%22scale%28#{$scale}%29%20rotate%28#{$rotate}%29%22%3E%3C%2Fpolygon%3E%3C%2Fsvg%3E";
  $wave: "data:image/svg+xml,%3Csvg%20width%3D%22#{$width}px%22%20height%3D%22#{$height}px%22%20version%3D%221.1%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%3E%3Cpath%20d%3D%22M8.00025863%2C0%20L0%2C6.59417725%20L0%2C8%20L8.00025885%2C1.40509033%20L16%2C8%20L16%2C6.59417725%20L8.00025863%2C0%20Z%22%20fill%3D%22%23#{$color}%22%20transform%3D%22scale%28#{$scale}%29%20rotate%28#{$rotate}%29%22%3E%3C%2Fpath%3E%3C%2Fsvg%3E";
  position: relative;

  &:#{$location} {
    content: '';
    height: #{$height}px;
    left: 0;
    position: absolute;
    right: 0;
    z-index: 10;

    @if $location == before {
      @if $side == inside {
        top: 0;
      }
      @else {
        top: -#{$height}px;
      }
    }
    @else {
      @if $side == inside {
        bottom: 0;
      } @else {
        bottom: -#{$height}px;
      }
    }
    @if $location == before {
      @if $side == inside {
        background-image: url($arrow);
      }
      @else {
        @if $type == fill {
          background-image: url($arrow);
        }
        @else {
          background-image: url($wave);
        }
      }
    }
    @else {
      @if $side == inside {
        background-image: url($arrow);
      }
      @else {
        @if $type == fill {
          background-image: url($arrow);
        }
        @else {
          background-image: url($wave);
        }
      }
    }
  }
}

@mixin media-query($media-query) {

  @if $media-query == xs-only {
    @media (max-width: $screen-xs - 1) { @content; }
  }

  @if $media-query == sm-only {
    @media (max-width: $screen-sm - 1) { @content; }
  }

  @if $media-query == sm {
    @media (min-width: $screen-xs) { @content; }
  }

  @if $media-query == md {
    @media (min-width: $screen-sm) { @content; }
  }

  @if $media-query == md-only {
    @media (max-width: $screen-md - 1) { @content; }
  }

  @if $media-query == lg {
    @media (min-width: $screen-md) { @content; }
  }

  @if $media-query == xl {
    @media (min-width: $screen-lg) { @content; }
  }
  @if $media-query == retina {
    @media (min--moz-device-pixel-ratio: 2), (-o-min-device-pixel-ratio: 2/1), (-webkit-min-device-pixel-ratio: 2), (min-device-pixel-ratio: 2) { @content; }
  }
}

// Just mqs helpers...
@mixin xs-only {
  @include media-query(xs-only) { @content }
}

@mixin sm {
  @include media-query(sm) { @content }
}

@mixin sm-only {
  @include media-query(sm-only) { @content }
}

@mixin md {
  @include media-query(md) { @content }
}

@mixin md-only {
  @include media-query(md-only) { @content }
}

@mixin lg {
  @include media-query(lg) { @content }
}

@mixin xl {
  @include media-query(xl) { @content }
}

@mixin retina {
  @include media-query(retina) { @content }
}
